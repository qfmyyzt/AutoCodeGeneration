import lombok.Data;
import org.jetbrains.annotations.NotNull;

/**
 * 全局统一返回结果类
 */
@Data
@SuppressWarnings("all")
public class Result<T> {
    //返回码
    private Integer code;
    //返回消息
    private String message;
    //返回数据
    private T data;
    // 时间戳->表示哪一次调的接口
    private Long timestamp;

    public Result()
    {
        //创建接口调用时间
        this.timestamp = System.currentTimeMillis();
    }

    /**
     * 构建一个包含数据的Result对象
     * @param <T> 数据的类型
     * @param data 要包含的数据，不能为空
     * @return 包含数据的Result对象
     */
    @NotNull
    private static <T> Result<T> build(T data) {
        // 创建一个新的Result对象
        Result<T> result = new Result<>();
        // 判断数据是否为空
        if (data != null) {
            // 如果数据不为空，则将数据设置到Result对象中
            result.setData(data);
        }
        // 返回Result对象
        return result;
    }

    /**
     * 构建一个包含数据和状态码的Result对象
     * @param <T> 数据的类型
     * @param body 要包含的数据
     * @param resultCodeEnum 状态码枚举
     * @return 包含数据和状态码的Result对象
     */
    @NotNull
    public static <T> Result<T> build(T body, @NotNull ResultCodeEnum resultCodeEnum) {
        // 调用build方法构建Result对象
        Result<T> result = build(body);
        // 设置Result对象的code属性为resultCodeEnum的code值
        result.setCode(resultCodeEnum.getCode());
        // 设置Result对象的message属性为resultCodeEnum的message值
        result.setMessage(resultCodeEnum.getMessage());
        // 返回构建好的Result对象
        return result;
    }

    /**
     * 构建一个表示操作成功的Result对象
     * @param <T> 数据的类型
     * @param data 要包含的数据
     * @return 包含数据和状态码为成功的Result对象
     */
    @NotNull
    public static <T> Result<T> ok(T data) {
        // 调用build方法，传入数据data和表示成功的ResultCodeEnum.SUCCESS
        // 构建一个包含数据和状态码为成功的Result对象
        return build(data, ResultCodeEnum.SUCCESS);
    }

    /**
     * 构建一个表示操作成功但无数据的Result对象
     * @param <T> 数据的类型，此处为null
     * @return 表示操作成功但无数据的Result对象
     */
    @NotNull
    public static <T> Result<T> ok() {
        // 调用Result类的ok方法，传入null作为数据参数
        // 构建一个表示操作成功但无数据的Result对象
        return Result.ok(null);
    }

    /**
     * 构建一个表示操作失败的Result对象
     * @param <T> 数据的类型，此处为null
     * @return 表示操作失败的Result对象
     */
    @NotNull
    public static <T> Result<T> fail() {
        // 调用build方法，传入null作为数据参数和ResultCodeEnum.FAIL作为状态码参数
        // 构建一个表示操作失败的Result对象
        return build(null, ResultCodeEnum.FAIL);
    }

    /**
     * 构建一个表示操作失败的Result对象，并指定错误码和错误信息
     * @param <T> 数据的类型，此处为null
     * @param code 错误码
     * @param message 错误信息
     * @return 表示操作失败的Result对象
     */
    @NotNull
    public static <T> Result<T> fail(Integer code, String message) {
        // 调用build方法，传入null作为数据参数，构建一个空的Result对象
        Result<T> result = build(null);
        // 设置Result对象的code属性为传入的错误码
        result.setCode(code);
        // 设置Result对象的message属性为传入的错误信息
        result.setMessage(message);
        // 返回构建好的Result对象
        return result;
    }

}
